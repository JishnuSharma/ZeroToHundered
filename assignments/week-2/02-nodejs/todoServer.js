/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");

const app = express();

app.use(bodyParser.json());

async function getTodoContents() {
    const filePath = path.join(__dirname, "todos.json");
    try {
        const data = await fs.promises.readFile(filePath, "utf-8");
        return JSON.parse(data);
    } catch (err) {
        console.error("Error reading the file:", err);
        throw err;
    }
}

async function updateToDo(data) {
    const filePath = path.join(__dirname, "todos.json");
    const jsonData = JSON.stringify(data, null, 2);
    try {
        await fs.promises.writeFile(filePath, jsonData);
        console.log("File written successfully!");
    } catch (err) {
        console.error("Error writing to the file:", err);
        throw err;
    }
}

app.get("/todos", async (req, res) => {
    try {
        const data = await getTodoContents();
        res.status(200).json(data);
    } catch (err) {
        res.status(500).json({ message: "Internal Server Error" });
    }
});

app.get("/todos/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    try {
        const data = await getTodoContents();
        const requestedTodo = data.find((todo) => todo.id === id);

        if (requestedTodo) {
            res.status(200).json(requestedTodo);
        } else {
            res.status(404).send("Todo not found");
        }
    } catch (err) {
        res.status(500).send("Internal Server Error");
    }
});

app.post("/todos", async (req, res) => {
    const { title, description, completed } = req.body;

    try {
        const data = await getTodoContents();
        const lastId = data.length > 0 ? data[data.length - 1].id : 0;

        const newTodo = {
            id: lastId + 1,
            title: title,
            description: description,
            completed: completed,
        };

        data.push(newTodo);
        await updateToDo(data);
        res.status(201).json({ id: newTodo.id });
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: "Error in creating todo", err });
    }
});

app.put("/todos/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    const { title, description, completed } = req.body;

    try {
        const todos = await getTodoContents();
        const todoIndex = todos.findIndex((todo) => todo.id === id);

        if (todoIndex === -1) {
            return res.status(404).json({ message: "Todo not found" });
        }

        if (title) {
            todos[todoIndex].title = title;
        }

        if (description) {
            todos[todoIndex].description = description;
        }

        if (completed !== undefined) {
            todos[todoIndex].completed = completed;
        }

        await updateToDo(todos);
        res.status(200).json({
            message: "Todo updated successfully",
            todo: todos[todoIndex],
        });
    } catch (err) {
        res.status(500).json({ message: "Error updating todo", err });
    }
});

app.delete("/todos/:id", async (req, res) => {
    const id = parseInt(req.params.id);

    try {
        const todos = await getTodoContents();
        const todoIndex = todos.findIndex((todo) => todo.id === id);

        if (todoIndex === -1) {
            return res.status(404).json({ message: "Todo not found" });
        }

        const updatedList = todos.filter((todo) => todo.id !== id);
        await updateToDo(updatedList);
        res.status(200).json({ message: "Todo deleted successfully" });
    } catch (err) {
        res.status(500).json({ message: "Error deleting todo", err });
    }
});

// app.listen(3000);

module.exports = app;
