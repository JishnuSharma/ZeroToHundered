Bash -> Commandline interpreter language which lets you interact with the operating system

==============================
PRINTING WORKING DIRECTORY
==============================

pwd -> Print working directory
- Path to my current folder 
- Terminal just an interface to do things on the machine

==============================
CHANGE DIRECTORY
==============================

cd -> Change directory
- It is used to change directory 
- cd directory_name -> Helps to go into that directory
- cd .. -> helps to go one level above the current directory
- cd ../.. -> helps to go two levels up that directory and so on
- cd + tab -> helps to autocomplete available directories
- We can give the path as well to do directly into sub folder 
cd Desktop/screenshots 
- We can also write a little of the name and then use tab to autocomplete
that particular name as well

- ( mkdir test && cd test ) -> This creates a new directory and makes it the current working directory

==============================
LIST COMMAND
==============================

ls -> List all the files in the current folder 
- helps to let see files
- ( ls -l ) helps to list all the information about the data in the directory [ Permissions, time etc ]
[ ls -l newdir ] -> This will list all the files and folder inside it with their details

- ( ls -R ) this will give us the information of all of the sub directories as well
[ ls -R newdir ] -> This will recursively go inside all the sub directories as well and list them and not just the first level

- ( ls -lt ) this will sort the file listing as well
[ These are ordered in the sequence of Latest modified to the oldest modified ]

- ( ls -la ) -> The a helps to list all the hidden files as well and not just the publically available files
[ ls -la ] -> This will list all the files in the mentioned directory along with hidden files
[ ls -lRa ] -> Using different flags together , this will recussivley go though all the sub-folders and list all their files along with hidden files as well

- ( ls -lr newdir ) -> This lists all the files in the reverse order from last modified to latest modified

- ( ls -s newdir ) -> Sorts the files based on their sizes

// TO FETCH ALL THE FILES WITH A CERTAIN EXTENSION
- ( ls -lR | grep .json ) -> This will recursively go through all the directories and sub directories and list out all the files having the .json extension
[ GREP -> Global Regular Expression Print ]

- ( ls *.json ) -> This is a wildcard and will list all the .json files in the current directory
- ( ls Zoo* ) -> Returns all the files and folders with Zoo in their name 
- ( ls .. ) -> Retuns all the files and folder in one level above the pwd

==============================
MAKE DIRECTORY COMMAND 
==============================

mkdir -> To make directory
- mkdir directory_name
- mkdir -p directory_name/sub_directory_name

==============================
TOUCH COMMAND
==============================

touch -> To make a new files
- touch file_name

==============================
CONCATENATE COMMAND
==============================

cat -> prints the contents of a file 
- cat file_name
- I can also be like cat folder_name/file_name.extension

- ( cat > filename.extension ) after pressing enter add the data then press ( Ctrl + D ) this will save the data to the file
- ( cat >> filename.extension ) after pressing this enter, the data now added gets concatenated to the end of the file

==============================
VIM COMMAND
==============================

vi -> This command lets you edit files 
- vi file_name ( this will open the file )
- To start writing press ( I -> Insert Mode )
- Then we type the things we want to enter in the file 
- To quit a file ( esc + : + q + !)
- To save the changes and quit ( esc + : + w + q + ! )
- w -> writes to the file and q used to quit the file 
- : -> this helps to enter the command Mode

==============================
MOVE COMMAND
==============================

mv -> Move files from one folder to another
- mv file_name directory_path_where_to_add
- mv folder_name directory_path_where_to_add

To rename file as well we make use of the mv command
- mv old_file_name.extension new_file_name.extension

To move file to a new directory and also rename it
- ls file_name.extension directory_path/new_file_name.extension

==============================
COPY COMMAND
==============================

cp -> Copy files from one place to other
- cp file_name directory_path_where_to_copy
- cp directory_name directory_path_where_to_copy ( this wont work )
- cp -r folder_name directory_path_where_to_copy ( this will work -r means recursive )

==============================
REMOVE COMMAND 
==============================

rm -> Removes the file from the directory
- rm file_name 
- rm -r folder_name

==============================
CHANGE PERMISSIONS COMMAND
==============================

chmod -> Change file permissions, used to modify the read, write and execute permissions of a file
- Takes two parameters: 
1. Who are you setting the permission for 
2. What are you doing ( setting permissions or revoking permissions)
3. What kind of permissions are you executing ( read, write or execute ) 
4. Specify the folder or file name ( in case of folder use -r for recursion )

WHO ARE YOU SETTING PERMISSIONS FOR: 
------
U -> for the user
G -> for the group
O -> for the others 

WHAT ARE YOU DOING 
-------
+ -> Adding a few permissions 
- -> Removing a few permissions 

WHAT KIND OF PERMISSIONS ARE YOU ADDING OR REVOKING
r -> Read 
w -> write 
x -> executing 

Working with permissions we can also make use of numbers to achieve the same. Each digit represents a permission
4 -> read
2 -> write
1 -> execute 
We sum the digits and then User Group Others in this sequence write the numbers ( total is 7 )

- chmod ugo-rwx file_name 
- chmod -R u+rw folder_name

Give read and write permissions to user and others 
- chmod 626 file_name ( -rw-w-rw )

==============================
ECHO COMMAND
==============================

echo -> It is used to print something in the terminal 
- Mostly used to see the path to the current working directory 
- echo $PATH

==============================
HEAD COMMAND 
==============================

head -> To see the first ten rows of the file 
- head file_name.extension
- head -20 file_name.extension ( To see the first 20 lines of the file )

==============================
TAIL COMMAND 
==============================

tail -> To see the last ten rows of the file 
- tail file_name.extension
- tail -20 file_name.extension ( To see the last 20 lines of the file )

To view the content of the file from line number 25 to line number 29 for this you need to combine the head and the tail
command

==============================
PIPE COMMAND
==============================

Pipe character | -> command 1 | command 2 ( The output of first command flows to the second command as input )
- tail -n +25 file_name.extension | head -5 

==============================
STATS COMMAND 
==============================

wc -> Get basic stats of the file 
- wc file_name.extension ( 50 -> number of lines 68 -> number of words 330 -> number of characters )
- wc -l ( Just returns the number of occurances )

==============================
GREP COMMAND
==============================

grep -> Lets you find occurances of certain workds , phrases or regex or particular expression within a set of files directory/project 
- grep "one" new_file_name.txt
- great "one" new_file.name.txt | wc ( How many times one was used in this file and the stats of lines words and characters )

- grep -c "phrase" file_name.txt ( Prints the number of occurances of that certain phrase in that file )
- grep -h "phrase" file_name.txt ( This will return all the lines with the occurances in the file ) - This is case sensitive
- grep -hi "phrase" file_name.txt ( This will return all the lines with the occurances in the file ) - This ignores the case
- grep -hir "phrase" directory_name ( This returns all occurances , where it occurs in the directory )
- grep -hin "phrase" file_name.txt ( This returns all the occurances with their line number ) - This returns the phrase wherever it comes , in the middle of a word as well
- grep -hinw "phrase" file_name.txt ( This returns all the occurances with their line number with the whole word One only not middle occurances )
- grep -A 5 "ERROR" log.txt -> This will give 5 lines after the occurance of error 
- grep -B 5 "ERROR" log.txt -> This will give 5 lines after the occurance
- grep -C 5 "ERROR" log.txt -> This will let us see 5 lines before and after the occurance

==============================
SED COMMAND 
==============================

sed -> Lets us find the occurance and make replacements in them 
- sed -n '/ERROR/p" log.txt ( This will print all the occurances like grep we use -n so that sed dosent print out all the characters in its output stream )
- sed 's/pattern/replacement' ( s tells that we are doing replacement )
- sed -ibackup 's/pattern/replacement' ( this creates a backup file in the same directory before making replacements )
- sed 'line_number s/pattern/replacement' ( replaces the pattern on given line number )
- sed 'from_line_number,till_line_number s/pattern/replacement' ( replaces the pattern in the given range )

==============================
AWK COMMAND
==============================

awk -> A scripting language in its own 
awk [options] script_file 
- Helps in working with columner data
https://drive.google.com/file/d/15juOJY4xz7wyfLzGtv_n3zJonWc-8_WE/view?usp=drive_link

==============================
HISTORY COMMAND 
==============================

history - Is used to view all the previously executed commands 

==============================
BASH SCRIPTS
==============================

BASH SCRIPTS 
We can write the commands in a file and then execute it , as the bash is also an interpreted language
- The extension is .sh
- The first line needs to be #!/bin/bash to tell that it is a bash script ( It tells which interpreter we would like to use to parse the script )
- To execute bash file_name.sh

==============================
NODE RELATED COMMANDS 
==============================

nvm -> node version manager 

if i write node and press enter i would open the node shell and 
in that terminal i can start writing javascript code. 

node file_name.js -> runs the file and prints the output

npm -> Node package manager 
- npm is used to install external dependencies
- npm registery is where it lets you add new powerful libraries